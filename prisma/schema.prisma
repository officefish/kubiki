// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  name          String?
  password      String
  secret        String?
  salt          String
  verified      Boolean
  role          Role     @default(GUEST)
  sessions      Session[]
  basicInfo     BasicInfo?
  quote         Quote?
  domain        Domain?
  avatar        Avatar? 
  cover         Cover?
  tartan        Tartan?
  challenges    Challenge[]
  artworks      Artwork[]
  scores        Score[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum Role {
  GUEST
  MEMBER
  PUBLISHER
  DEVELOPER
  ADMIN
  JUDGE
}

model Session {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  token       String    @unique
  valid       Boolean   @default(false)
  userAgent   String?
  language    String?
  referer     String?
  isMobile    Boolean?
  user        User      @relation(fields:[userId], references:[id])
  userId      String    @db.ObjectId
}

// BasicInfo

model FullName {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String?
  lastName        String?
  basicInfo       BasicInfo @relation(fields:[basicInfoId], references:[id]) 
  basicInfoId     String    @db.ObjectId @unique
}

model Career {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  company     String?
  role        String?
  basicInfo   BasicInfo @relation(fields:[basicInfoId], references:[id])
  basicInfoId String    @db.ObjectId @unique
}

model Education {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  university  String?
  faculty     String?
  basicInfo   BasicInfo @relation(fields:[basicInfoId], references:[id])
  basicInfoId String    @db.ObjectId @unique
}

model Location {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  country     String?
  region      String?
  timeZone    String?
  basicInfo   BasicInfo @relation(fields:[basicInfoId], references:[id])
  basicInfoId String    @db.ObjectId @unique
}

model BasicInfo {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  fullName   FullName?
  career     Career?
  education  Education?
  location   Location?
}

model Quote {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  content    String?
}

model Domain {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  value      String?   @unique
}

model Avatar {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  url        String?   
}

model Cover {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  url        String?   
}

model Tartan {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  pattern    String?
  hashed     String? 
  url        String? 
}


enum ChallengeStatus {
  BOOKED
  OPEN
  CLOSED
}

model Challenge {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  creator       User        @relation(fields:[creatorId], references:[id]) 
  creatorId     String      @db.ObjectId @unique
  title         String      
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        ChallengeStatus @default(OPEN)  
  artworks      Artwork[] 
  categories    Category[]
  scores        Score[]
}

model Category {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  challenge     Challenge   @relation(fields:[challengeId], references:[id]) 
  challengeId   String      @db.ObjectId @unique
  title         String
}

enum Sex {
  MALE
  FEMALE
}


model Author {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String?
  lastName        String?
  sex             Sex       @default(MALE)
  age             Int       @default(12)
  artworks        Artwork[]
}

enum AgeGroup {
  KIDS // 4-5 years
  PRESCHOOL // 6-7 years
  YOUNGEST  // 8-10 years
  AVERAGE // 11-14 years
  OLDER // 15-17 years old
}

model Artwork {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  challenge     Challenge   @relation(fields:[challengeId], references:[id]) 
  challengeId   String      @db.ObjectId @unique
  publisher     User        @relation(fields:[publisherId], references:[id]) 
  publisherId   String      @db.ObjectId @unique
  author        Author      @relation(fields:[authorId], references:[id]) 
  authorId      String      @db.ObjectId @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  url           String?  
  original      String?
  scores        Score[]
  likes         Like[]    
  ageGroup      AgeGroup    @default(AVERAGE)
  total         Int         @default(0)
}

model Like {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  artwork         Artwork           @relation(fields:[artworkId], references:[id]) 
  artworkId       String            @db.ObjectId @unique
  ip              String
}

model Score {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  judge           User              @relation(fields:[judgeId], references:[id]) 
  judgeId         String            @db.ObjectId @unique
  challenge       Challenge         @relation(fields:[challengeId], references:[id]) 
  challengeId     String            @db.ObjectId @unique
  artwork         Artwork           @relation(fields:[artworkId], references:[id]) 
  artworkId       String            @db.ObjectId @unique
  categoryScores  CategoryScore[]
  total           Int               @default(0)
}

model CategoryScore {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  score         Score       @relation(fields:[scoreId], references:[id]) 
  scoreId       String      @db.ObjectId @unique
  value         Int         @default(0)
  title         String
} 